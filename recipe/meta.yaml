{% set version = "0.5.5" %}

# This package builds 2 outputs
#    zfp     --- C headers, and python site-packages
#    zfpy    --- Depends on python + numpy
#
# This keeps the recipe simpler than building the python
# packages in isolation given the current knowledge of the build system
# of zfp

package:
  name: zfp
  version: {{ version }}

source:
  url: https://github.com/LLNL/zfp/archive/{{ version }}.tar.gz
  sha256: 6a7f4934489087d9c117a4af327fd6495ea757924f4df467b9c537abf8bd86c4
  patches:
    - 100-update-cmake.patch

build:
  number: 1
  script: build_zfpy.sh  # [unix]
  script: bld_zfpy.bat   # [win]

requirements:
  requirements:
    host:
      - python
      - numpy
      - cython
    run:
      - python
      - {{ pin_compatible('numpy') }}
      - {{ pin_subpackage('zfp', exact=True) }}
  tests:
    imports:
      - zfpy

outputs:
  - name: zfpy
  - name: zfp
    build:
      script: build_zfp.py  # [unix]
      script: bld_zfp.bat   # [win]
      run_exports:
        # No real information, for now, let keep the defaults
        - {{ pin_subpackage('zfp') }}
      rpaths:
        - lib/  # [unix]
    requirements:
      build:
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - cmake
        - make     # [unix]
        - ninja    # [win]
        - libgomp  # [linux]
      host:
        - libgomp  # [linux]

    test:
      commands:
        - test -f $PREFIX/include/zfp.h                # [unix]
        - if not exist %LIBRARY_INC%\zfp.h exit 1      # [win]
        - test -f $PREFIX/lib/libzfp.so.{{ version }}  # [linux]
        - test -f $PREFIX/lib/libzfp${SHLIB_EXT}       # [unix]
        - if not exist %LIBRARY_BIN%\zfp.dll exit 1    # [win]
        - if not exist %LIBRARY_LIB%\zfp.lib exit 1    # [win]
        # Command always returns 1
        - which zfp  # [unix]
        - where zfp  # [win]

about:
  home: https://computation.llnl.gov/projects/floating-point-compression
  license: BSD 3-Clause Modified
  license_family: BSD
  license_file: LICENSE
  summary: 'Library for compressed numerical arrays that support high throughput read and write random access'
  description: |
    zfp is an open source C/C++ library for compressed numerical arrays
    that support high throughput read and write random access. zfp also
    supports streaming compression of integer and floating-point data,
    e.g., for applications that read and write large data sets to and
    from disk. zfp is primarily written in C and C++ but also includes
    Python and Fortran bindings.
  doc_url: http://zfp.readthedocs.io/en/release0.5.5/
  dev_url: https://github.com/LLNL/zfp

extra:
  recipe-maintainers:
    - kmpaul
    - ToreAad
    - lindstro
    - GarrettDMorrison
